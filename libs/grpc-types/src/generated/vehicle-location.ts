// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: vehicle-location.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "vehicle_location";

export interface VehicleLocationRequest {
  vehicleLocations: VehicleLocation | undefined;
}

export interface VehicleLocationReply {
  status: number;
}

export interface VehicleLocation {
  vehicleId: string;
  routeId: string;
  latitude: string;
  longitude: string;
}

function createBaseVehicleLocationRequest(): VehicleLocationRequest {
  return { vehicleLocations: undefined };
}

export const VehicleLocationRequest: MessageFns<VehicleLocationRequest> = {
  encode(message: VehicleLocationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vehicleLocations !== undefined) {
      VehicleLocation.encode(message.vehicleLocations, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleLocationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleLocationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.vehicleLocations = VehicleLocation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleLocationRequest {
    return {
      vehicleLocations: isSet(object.vehicleLocations) ? VehicleLocation.fromJSON(object.vehicleLocations) : undefined,
    };
  },

  toJSON(message: VehicleLocationRequest): unknown {
    const obj: any = {};
    if (message.vehicleLocations !== undefined) {
      obj.vehicleLocations = VehicleLocation.toJSON(message.vehicleLocations);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleLocationRequest>, I>>(base?: I): VehicleLocationRequest {
    return VehicleLocationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleLocationRequest>, I>>(object: I): VehicleLocationRequest {
    const message = createBaseVehicleLocationRequest();
    message.vehicleLocations = (object.vehicleLocations !== undefined && object.vehicleLocations !== null)
      ? VehicleLocation.fromPartial(object.vehicleLocations)
      : undefined;
    return message;
  },
};

function createBaseVehicleLocationReply(): VehicleLocationReply {
  return { status: 0 };
}

export const VehicleLocationReply: MessageFns<VehicleLocationReply> = {
  encode(message: VehicleLocationReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleLocationReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleLocationReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleLocationReply {
    return { status: isSet(object.status) ? globalThis.Number(object.status) : 0 };
  },

  toJSON(message: VehicleLocationReply): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleLocationReply>, I>>(base?: I): VehicleLocationReply {
    return VehicleLocationReply.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleLocationReply>, I>>(object: I): VehicleLocationReply {
    const message = createBaseVehicleLocationReply();
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseVehicleLocation(): VehicleLocation {
  return { vehicleId: "", routeId: "", latitude: "", longitude: "" };
}

export const VehicleLocation: MessageFns<VehicleLocation> = {
  encode(message: VehicleLocation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vehicleId !== "") {
      writer.uint32(10).string(message.vehicleId);
    }
    if (message.routeId !== "") {
      writer.uint32(18).string(message.routeId);
    }
    if (message.latitude !== "") {
      writer.uint32(26).string(message.latitude);
    }
    if (message.longitude !== "") {
      writer.uint32(34).string(message.longitude);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleLocation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.vehicleId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.routeId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.latitude = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.longitude = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleLocation {
    return {
      vehicleId: isSet(object.vehicleId) ? globalThis.String(object.vehicleId) : "",
      routeId: isSet(object.routeId) ? globalThis.String(object.routeId) : "",
      latitude: isSet(object.latitude) ? globalThis.String(object.latitude) : "",
      longitude: isSet(object.longitude) ? globalThis.String(object.longitude) : "",
    };
  },

  toJSON(message: VehicleLocation): unknown {
    const obj: any = {};
    if (message.vehicleId !== "") {
      obj.vehicleId = message.vehicleId;
    }
    if (message.routeId !== "") {
      obj.routeId = message.routeId;
    }
    if (message.latitude !== "") {
      obj.latitude = message.latitude;
    }
    if (message.longitude !== "") {
      obj.longitude = message.longitude;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleLocation>, I>>(base?: I): VehicleLocation {
    return VehicleLocation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleLocation>, I>>(object: I): VehicleLocation {
    const message = createBaseVehicleLocation();
    message.vehicleId = object.vehicleId ?? "";
    message.routeId = object.routeId ?? "";
    message.latitude = object.latitude ?? "";
    message.longitude = object.longitude ?? "";
    return message;
  },
};

export interface VehicleLocationService {
  SendVehicleLocation(request: VehicleLocationRequest): Promise<VehicleLocationReply>;
}

export const VehicleLocationServiceServiceName = "vehicle_location.VehicleLocationService";
export class VehicleLocationServiceClientImpl implements VehicleLocationService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || VehicleLocationServiceServiceName;
    this.rpc = rpc;
    this.SendVehicleLocation = this.SendVehicleLocation.bind(this);
  }
  SendVehicleLocation(request: VehicleLocationRequest): Promise<VehicleLocationReply> {
    const data = VehicleLocationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SendVehicleLocation", data);
    return promise.then((data) => VehicleLocationReply.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
